{
  "version": 3,
  "sources": ["../../../../../node_modules/magic-grid/dist/magic-grid.esm.js"],
  "sourcesContent": ["/**\n * @author emmanuelolaojo\n * @since 11/11/18\n */\n\n/**\n * Validates the configuration object.\n *\n * @param config - configuration object\n */\nvar checkParams = function (config) {\n  var DEFAULT_GUTTER = 25;\n\n  if (!config) {\n    throw new Error(\"No config object has been provided.\");\n  }\n\n  if(typeof config.useTransform !== \"boolean\"){\n    config.useTransform = true;\n  }\n\n  if(typeof config.gutter !== \"number\"){\n    config.gutter = DEFAULT_GUTTER;\n  }\n\n  if (!config.container) { error(\"container\"); }\n  if (!config.items && !config.static) { error(\"items or static\"); }\n};\n\n\n/**\n * Handles invalid configuration object\n * errors.\n *\n * @param prop - a property with a missing value\n */\nvar error = function (prop) {\n  throw new Error((\"Missing property '\" + prop + \"' in MagicGrid config\"));\n};\n\n/**\n * Finds the shortest column in\n * a column list.\n *\n * @param cols - list of columns\n *\n * @return shortest column\n */\nvar getMin = function (cols) {\n  var min = cols[0];\n\n  for (var col of cols) {\n    if (col.height < min.height) { min = col; }\n  }\n\n  return min;\n};\n\n/**\n * @author emmanuelolaojo\n * @since 11/10/18\n *\n * The MagicGrid class is an\n * implementation of a flexible\n * grid layout.\n */\n\nvar MagicGrid = function MagicGrid (config) {\n  checkParams(config);\n\n  if (config.container instanceof HTMLElement) {\n    this.container = config.container;\n    this.containerClass = config.container.className;\n  }\n  else {\n    this.containerClass = config.container;\n    this.container = document.querySelector(config.container);\n  }\n\n  this.items = this.container.children;\n  this.static = config.static || false;\n  this.size = config.items;\n  this.gutter = config.gutter;\n  this.maxColumns = config.maxColumns || false;\n  this.useMin = config.useMin || false;\n  this.useTransform = config.useTransform;\n  this.animate = config.animate || false;\n  this.started = false;\n\n  this.init();\n};\n\n/**\n * Initializes styles\n *\n * @private\n */\nMagicGrid.prototype.init = function init () {\n  if (!this.ready() || this.started) { return; }\n\n  this.container.style.position = \"relative\";\n\n  for (var i = 0; i < this.items.length; i++) {\n    var style = this.items[i].style;\n\n    style.position = \"absolute\";\n  \n    if (this.animate) {\n      style.transition = (this.useTransform ? \"transform\" : \"top, left\") + \" 0.2s ease\";\n    }\n  }\n\n  this.started = true;\n};\n\n/**\n * Calculates the width of a column.\n *\n * @return width of a column in the grid\n * @private\n */\nMagicGrid.prototype.colWidth = function colWidth () {\n  return this.items[0].getBoundingClientRect().width + this.gutter;\n};\n\n/**\n * Initializes an array of empty columns\n * and calculates the leftover whitespace.\n *\n * @return {{cols: Array, wSpace: number}}\n * @private\n */\nMagicGrid.prototype.setup = function setup () {\n  var width = this.container.getBoundingClientRect().width;\n  var colWidth = this.colWidth();\n  var numCols = Math.floor(width/colWidth) || 1;\n  var cols = [];\n\n  if (this.maxColumns && numCols > this.maxColumns) {\n    numCols = this.maxColumns;\n  }\n\n  for (var i = 0; i < numCols; i++) {\n    cols[i] = {height: 0, index: i};\n  }\n\n  var wSpace = width - numCols * colWidth + this.gutter;\n\n  return {cols: cols, wSpace: wSpace};\n};\n\n/**\n * Gets the next available column.\n *\n * @param cols list of columns\n * @param i index of dom element\n *\n * @return {*} next available column\n * @private\n */\nMagicGrid.prototype.nextCol = function nextCol (cols, i) {\n  if (this.useMin) {\n    return getMin(cols);\n  }\n\n  return cols[i % cols.length];\n};\n\n/**\n * Positions each item in the grid, based\n * on their corresponding column's height\n * and index then stretches the container to\n * the height of the grid.\n */\nMagicGrid.prototype.positionItems = function positionItems () {\n  var ref = this.setup();\n    var cols = ref.cols;\n    var wSpace = ref.wSpace;\n  var maxHeight = 0;\n  var colWidth = this.colWidth();\n\n  wSpace = Math.floor(wSpace / 2);\n\n  for (var i = 0; i < this.items.length; i++) {\n    var col = this.nextCol(cols, i);\n    var item = this.items[i];\n    var topGutter = col.height ? this.gutter : 0;\n    var left = col.index * colWidth + wSpace + \"px\";\n    var top = col.height + topGutter + \"px\";\n\n    if(this.useTransform){\n      item.style.transform = \"translate(\" + left + \", \" + top + \")\";\n    }\n    else{\n      item.style.top = top;\n      item.style.left = left;\n    }\n\n    col.height += item.getBoundingClientRect().height + topGutter;\n\n    if(col.height > maxHeight){\n      maxHeight = col.height;\n    }\n  }\n\n  this.container.style.height = maxHeight + \"px\";\n};\n\n/**\n * Checks if every item has been loaded\n * in the dom.\n *\n * @return {Boolean} true if every item is present\n */\nMagicGrid.prototype.ready = function ready () {\n  if (this.static) { return true; }\n  return this.items.length >= this.size;\n};\n\n/**\n * Periodically checks that all items\n * have been loaded in the dom. Calls\n * this.listen() once all the items are\n * present.\n *\n * @private\n */\nMagicGrid.prototype.getReady = function getReady () {\n    var this$1 = this;\n\n  var interval = setInterval(function () {\n    this$1.container = document.querySelector(this$1.containerClass);\n    this$1.items = this$1.container.children;\n\n    if (this$1.ready()) {\n      clearInterval(interval);\n\n      this$1.init();\n      this$1.listen();\n    }\n  }, 100);\n};\n\n/**\n * Positions all the items and\n * repositions them whenever the\n * window size changes.\n */\nMagicGrid.prototype.listen = function listen () {\n    var this$1 = this;\n\n  if (this.ready()) {\n    var timeout;\n\n    window.addEventListener(\"resize\", function () {\n      if (!timeout){\n        timeout = setTimeout(function () {\n          this$1.positionItems();\n          timeout = null;\n        }, 200);\n      }\n    });\n\n    this.positionItems();\n  }\n  else { this.getReady(); }\n};\n\nexport default MagicGrid;\n"],
  "mappings": "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",
  "names": ["MagicGrid", "colWidth"]
}
